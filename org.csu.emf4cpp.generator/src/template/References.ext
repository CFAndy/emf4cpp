/*
 * References.ext
 * Copyright (C) CÃ¡tedra SAES-UMU 2010 <andres.senac@um.es>
 * 
 * EMF4CPP is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EMF4CPP is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
import org::eclipse::emf::ecore;

extension template::Types;
extension template::FQN;
extension template::Member;
extension template::Packages;

String getTypeFQN(EReference this) :
    "::" + EType.getFQN("::")
;

String getPtr(EReference this) :
    if containment then
        getTypeFQN() + "_ptr"
    else
        getTypeFQN() + "_ptr"
;

String getList(EReference this) :
    "::ecorecpp::mapping::EList< " + getPtr()  + " >"
;

String getListImpl(EReference this) :
    "::ecorecpp::mapping::ReferenceEListImpl< " + getPtr()  + ", " + upperBound + ", " + containment + ", " + (EOpposite != null) +" >"
;

String _getListImplConstructorOpposite(EReference this) :
    if EOpposite != null then
        ", " + EOpposite.EContainingClass.EPackage.getPackageFQN() + "::" + EOpposite.getFeatureIDFQN()
    else
        ""
;

String getListImplConstructorParameters(EReference this) :
	"this, " + EContainingClass.EPackage.getFeatureGetMemberCall(this) + _getListImplConstructorOpposite(this)
;

String getListImplConstructorParametersOptional(EReference this) :
	"this, " +
	EContainingClass.EPackage.getFeatureGetMemberCallOptional(this, this) + _getListImplConstructorOpposite(this)
;

// Reference type
String getReferencEType(EReference this) :
 	if isMultiple() then
		"std::shared_ptr<" + getList() + ">"
	else
		getPtr()
;

// Reference returned type
String getReferenceReturnedType(EReference this) :
    if isMultiple() then
        getList() + "&"
    else
        getPtr()        
;

// Reference member name
String getRefMemberName(EReference this) :
	getMemberPrefix() + name;

// Declaration
String getCPPDeclaration(EReference this) : 
	getReferencEType() + " " + getRefMemberName()
;

// Set !isMultiple() required
String getSetCPPSignature(EReference this, String prefix) :
	"void " + prefix + "set"+ name.toFirstUpper() + " (" + getReferencEType() + " _" + name + ")";
	
String getSetCPPSignature(EReference this) : 
	getSetCPPSignature("");

String getSetCPPSignatureO(EReference this, String prefix) :
	"void set"+ name.toFirstUpper() + " (" + getTypeFQN() + "_ptr
	_" + name + ") { set" + name.toFirstUpper() + "( _" + name + ".get() ); }";
	
String getSetCPPSignatureO(EReference this) : 
	getSetCPPSignatureO("");
	
// Get
String getGetCPPSignature(EReference this, String prefix) :
	getReferenceReturnedType() + " " + prefix + "get"+ name.toFirstUpper() + " ()";

String getGetCPPSignatureConst(EReference this, String prefix) :
    if isMultiple() then
		"const " + getReferenceReturnedType() + " " + prefix + "get"+ name.toFirstUpper() + " () const"
	else
		getReferenceReturnedType() + " " + prefix + "get"+ name.toFirstUpper() + " () const"
;

String getGetCPPSignature(EReference this) : 
	getGetCPPSignature("");

String getGetCPPSignatureConst(EReference this) :
	getGetCPPSignatureConst("");

String getSetCPPCall(EReference this, String prefix) :
       prefix + "set"+ name.toFirstUpper();
